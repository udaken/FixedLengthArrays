<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//#define GENERATE_ENUMERABLE
//#define GENERATE_CTOR
#define GENERATE_ASSPAN

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace FixedLengthArray
{
<#foreach((var elementType,var length) in 
	(new []{2,3,4,5,6,7,8,16,32}.Select(elem => (elementType: "IntPtr", Count: elem)))
	) {
	var generatedTypeName = "FixedLength" + elementType + "Array" + length;
#>
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
	public struct <#=generatedTypeName#> : IFixedLengthArray<<#=elementType#>>
		, IEquatable<<#=generatedTypeName#>>
		, IEquatableByRef<<#=generatedTypeName#>>
	{
		public const int ConstLength = <#=length#>;
		public readonly int Length => ConstLength;
		readonly int IReadOnlyCollection<<#=elementType#>>.Count => ConstLength;

#if GENERATE_CTOR
		public <#=generatedTypeName#>(
			<#=elementType#> field0
<#for(var j = 1; j < length; j++){#>
			, <#=elementType#> field<#=j#>
<#}#>
		)
		{
<#for(var j = 0; j < length; j++){#>
			Field<#=j#> = field<#=j#>;
<#}#>
		}
#endif

		public <#=elementType#> Field0;
<#for(var j = 1; j < length; j++){#>
		public <#=elementType#> Field<#=j#>;
<#}#>

        public <#=elementType#> this[int index]
        {
#if GENERATE_ASSPAN
			readonly get => FixedLengthArrayExtension.AsReadOnlySpan(in this)[index];
			set => FixedLengthArrayExtension.AsSpan(ref this)[index] = value;
#else
            readonly get => index switch
            {
<#for(var j = 0; j < length; j++){#>
                <#=j#> => Field<#=j#>,
<#}#>
                _ => throw new ArgumentOutOfRangeException(nameof(index)),
            };
            set
            {
                switch (index)
                {
<#for(var j = 0; j < length; j++){#>
                    case <#=j#>: Field<#=j#> = value; break;
<#}#>
					default: throw new ArgumentOutOfRangeException(nameof(index));
                }
            }
#endif
        }
#if GENERATE_ASSPAN
        public readonly override bool Equals(object other)
			=> other is <#=generatedTypeName#> array
				? FixedLengthArrayExtension.Equals(in this, array)
				: false;

        public readonly bool Equals(in <#=generatedTypeName#> other)
			=> FixedLengthArrayExtension.Equals(in this, in other);

        readonly bool IEquatable<<#=generatedTypeName#>>.Equals(<#=generatedTypeName#> other)
			=> this.Equals(in other);
		
        public static bool operator ==(in <#=generatedTypeName#> left, in <#=generatedTypeName#> right)
            => left.Equals(right);

        public static bool operator !=(in <#=generatedTypeName#> left, in <#=generatedTypeName#> right)
            => !(left == right);
#endif

        public override readonly int GetHashCode()
        {
#if GENERATE_ASSPAN
			int hash = 0;
			var span = FixedLengthArrayExtension.AsReadOnlySpan(this);
            for(int i = 0; i < span.Length; i++)
			{
				hash = FixedLengthArray.Combine(hash, (int)FixedLengthArray.RotateToLeft((uint)span[i].GetHashCode(), i));
			}
			return hash;
#else
			int hash = 0;
            for(int i = 0; i < ConstLength; i++)
			{
				hash = FixedLengthArray.Combine(hash, (int)FixedLengthArray.RotateToLeft((uint)this[i].GetHashCode(), i));
			}
			return hash;
#endif
        }

		readonly IEnumerator<<#=elementType#>> IEnumerable<<#=elementType#>>.GetEnumerator()
		{
			for(var i = 0; i < ConstLength; i++)
			{
				yield return this[i];
			}
		}

		readonly System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			=> (this as IEnumerable<<#=elementType#>>).GetEnumerator();

#if GENERATE_ASSPAN
		public readonly ReadOnlySpan<<#=elementType#>>.Enumerator GetEnumerator()
			=> FixedLengthArrayExtension.AsReadOnlySpan(this).GetEnumerator();

        public static implicit operator ReadOnlySpan<<#=elementType#>>(in <#=generatedTypeName#> self)
            => self.AsReadOnlySpan();
#endif
	}
	
    public static partial class FixedLengthArrayExtension
    {
#if GENERATE_ASSPAN
		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static Span<<#=elementType#>> AsSpan(this ref <#=generatedTypeName#> array)
            => FixedLengthArray.CreateSpan(ref array.Field0, array.Length);

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ReadOnlySpan<<#=elementType#>> AsReadOnlySpan(this in <#=generatedTypeName#> array)
            => FixedLengthArray.CreateReadOnlySpan(array.Field0, array.Length);
#endif

#if GENERATE_ASSPAN
		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ref <#=elementType#> At(this ref <#=generatedTypeName#> array, int index)
            => ref AsSpan(ref array)[index];

        public static void CopyTo(this in <#=generatedTypeName#> array, Span<<#=elementType#>> destination)
            => AsReadOnlySpan(array).CopyTo(destination);

        public static void Fill(this ref <#=generatedTypeName#> array, <#=elementType#> value = default)
            => AsSpan(ref array).Fill(value);
#else
        public static ref <#=elementType#> At(this ref <#=generatedTypeName#> array, int index)
        {
            switch (index)
            {
<#for(var j = 0; j < length; j++){#>
                case <#=j#>: return ref array.Field<#=j#>;
<#}#>
				default: throw new ArgumentOutOfRangeException(nameof(index));
            }
        }
        public static void Fill(this ref <#=generatedTypeName#> array, <#=elementType#> value = default)
        {
			for(int i = 0; i < array.Length;i++ )
			{
				array[i] = value;
			}
        }
#endif
    }
<#}#>
}
